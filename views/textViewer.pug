extends layout

block styles
  style.
    .text-viewer-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .text-content {
      border: 1px solid #e0e0e0;
      padding: 15px;
      max-height: 600px;
      overflow-y: auto;
      background-color: #fafafa;
      border-radius: 4px;
      font-family: monospace;
      white-space: pre-wrap;
    }
    
    .filter-form {
      margin-bottom: 20px;
      display: flex;
      align-items: center;
    }
    
    .filter-form input {
      flex-grow: 1;
      margin-right: 10px;
    }
    
    .line-item {
      display: flex;
      align-items: center;
      padding: 4px 0;
      border-bottom: 1px solid #f0f0f0;
    }
    
    .line-item:hover {
      background-color: #f5f5f5;
    }
    
    .line-checkbox {
      margin-right: 10px;
      min-width: 20px;
    }
    
    .line-content {
      flex-grow: 1;
      font-family: monospace;
    }
    
    .highlight {
      background-color: #ffeb3b;
      padding: 0 2px;
    }
    
    .controls {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
    }
    
    .btn-action {
      margin-right: 10px;
    }
    
    .selection-controls {
      margin-top: 20px;
    }
    
    .line-number {
      display: inline-block;
      width: 40px;
      color: #999;
      margin-right: 10px;
      font-size: 0.85em;
    }
    
    .stats {
      margin-bottom: 15px;
      color: #666;
    }
    
    .import-progress-container {
      display: none;
      margin-top: 20px;
      padding: 15px;
      border: 1px solid #e0e0e0;
      border-radius: 5px;
      background-color: #f8f9fa;
    }
    
    .progress {
      height: 20px;
      margin-top: 10px;
    }

block content
  .page-header
    h1 Text Viewer
    p.text-muted View, filter, and select data from imported PDF
  
  .text-viewer-container
    .controls
      a.btn.btn-secondary(href='/bss-contacts')
        i.fas.fa-arrow-left.mr-2
        | Back to Imports
      
      .btn-group
        a.btn.btn-info.btn-action(href=`/bss-contacts/download/${importRecord.id}`, target="_blank")
          i.fas.fa-file-pdf.mr-1
          | View PDF
        button.btn.btn-danger.btn-action#deleteBtn(data-id=importRecord.id)
          i.fas.fa-trash.mr-1
          | Delete Import
    
    .stats
      p
        strong Filename: 
        span= importRecord.filename
      p
        strong Import Date: 
        span= new Date(importRecord.importDate).toLocaleString()
    
    form.filter-form(action=`/bss-contacts/filter-text/${importRecord.id}` method="post")
      input.form-control(type="text", name="filterTerm", placeholder="Filter content...", value=filterTerm)
      button.btn.btn-primary(type="submit")
        i.fas.fa-search.mr-1
        | Filter
      if filterTerm
        a.btn.btn-secondary.ml-2(href=`/bss-contacts/view-text/${importRecord.id}`)
          i.fas.fa-times.mr-1
          | Clear
    
    if lines && lines.length > 0
      .stats
        p Showing #{lines.length} lines
        
      .selection-controls.mb-3
        button.btn.btn-outline-primary.btn-sm#selectAllBtn
          i.fas.fa-check-square.mr-1
          | Select All
        button.btn.btn-outline-secondary.btn-sm.ml-2#deselectAllBtn
          i.fas.fa-square.mr-1
          | Deselect All
        button.btn.btn-success.btn-sm.ml-2#importSelectedBtn(disabled)
          i.fas.fa-file-import.mr-1
          | Import Selected
        span.ml-3#selectedCount 0 lines selected
      
      .text-content
        form#textContentForm
          each line, index in lines
            .line-item
              .line-checkbox
                input(type="checkbox", name="selectedLines", value=line, id=`line-${index}`, class="line-selector")
              .line-content
                label(for=`line-${index}`)
                  span.line-number #{index + 1}:
                  if filterTerm
                    - const parts = line.split(new RegExp(`(${filterTerm})`, 'gi'));
                    each part, i in parts
                      if i % 2 === 1
                        span.highlight= part
                      else
                        span= part
                  else
                    span= line
    else
      .alert.alert-info No content to display
      
    #importProgressContainer.import-progress-container
      h4 Import Progress
      p#statusMessage Preparing to import selected lines...
      
      .progress
        #progressBar.progress-bar.progress-bar-striped.progress-bar-animated(role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100") 0%

block scripts
  script.
    // Function to update selected count
    function updateSelectedCount() {
      const selectedCheckboxes = document.querySelectorAll('.line-selector:checked');
      const count = selectedCheckboxes.length;
      document.getElementById('selectedCount').textContent = `${count} lines selected`;
      
      // Enable or disable import button
      document.getElementById('importSelectedBtn').disabled = count === 0;
    }
    
    // Add event listeners to checkboxes
    document.querySelectorAll('.line-selector').forEach(checkbox => {
      checkbox.addEventListener('change', updateSelectedCount);
    });
    
    // Select all button
    document.getElementById('selectAllBtn').addEventListener('click', function(e) {
      e.preventDefault();
      document.querySelectorAll('.line-selector').forEach(checkbox => {
        checkbox.checked = true;
      });
      updateSelectedCount();
    });
    
    // Deselect all button
    document.getElementById('deselectAllBtn').addEventListener('click', function(e) {
      e.preventDefault();
      document.querySelectorAll('.line-selector').forEach(checkbox => {
        checkbox.checked = false;
      });
      updateSelectedCount();
    });
    
    // Import selected button
    document.getElementById('importSelectedBtn').addEventListener('click', async function(e) {
      e.preventDefault();
      const selectedCheckboxes = document.querySelectorAll('.line-selector:checked');
      
      if (selectedCheckboxes.length === 0) {
        alert('Please select at least one line to import');
        return;
      }
      
      // Show progress container
      const progressContainer = document.getElementById('importProgressContainer');
      progressContainer.style.display = 'block';
      
      // Update progress bar
      const progressBar = document.getElementById('progressBar');
      progressBar.style.width = '10%';
      progressBar.setAttribute('aria-valuenow', 10);
      progressBar.textContent = '10%';
      
      // Collect selected lines
      const selectedLines = Array.from(selectedCheckboxes).map(cb => cb.value);
      
      try {
        // Call API to import selected lines
        const response = await fetch(`/bss-contacts/import-filtered/${importRecord.id}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            selectedLines,
            filterTerm: document.querySelector('input[name="filterTerm"]').value
          })
        });
        
        // Update progress
        progressBar.style.width = '50%';
        progressBar.setAttribute('aria-valuenow', 50);
        progressBar.textContent = '50%';
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Import failed');
        }
        
        const data = await response.json();
        
        // Update progress to complete
        progressBar.style.width = '100%';
        progressBar.setAttribute('aria-valuenow', 100);
        progressBar.textContent = '100%';
        
        // Update status message
        document.getElementById('statusMessage').textContent = `Import completed! ${data.contactsImported} contacts imported.`;
        
        // Show success message
        alert(`Import successful! ${data.contactsImported} contacts were imported.`);
        
        // Optionally redirect back to imports page after a delay
        setTimeout(() => {
          window.location.href = '/bss-contacts';
        }, 2000);
        
      } catch (error) {
        console.error('Import error:', error);
        
        // Update progress to error state
        progressBar.style.width = '100%';
        progressBar.classList.remove('bg-primary');
        progressBar.classList.add('bg-danger');
        
        // Update status message
        document.getElementById('statusMessage').textContent = `Error: ${error.message}`;
        
        // Show error message
        alert(`Import failed: ${error.message}`);
      }
    });
    
    // Delete button
    document.getElementById('deleteBtn').addEventListener('click', async function() {
      if (!confirm('Are you sure you want to delete this import? This will remove the PDF and all associated data.')) {
        return;
      }
      
      try {
        const importId = this.getAttribute('data-id');
        const response = await fetch(`/bss-contacts/delete/${importId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Delete failed');
        }
        
        const data = await response.json();
        alert('Import deleted successfully');
        window.location.href = '/bss-contacts';
      } catch (error) {
        console.error('Delete error:', error);
        alert(`Delete failed: ${error.message}`);
      }
    }); 