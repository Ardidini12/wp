extends layout

block styles
  style.
    .sales-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .card {
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .message-list {
      max-height: 500px;
      overflow-y: auto;
    }
    
    .message-item {
      padding: 12px;
      margin-bottom: 10px;
      border-radius: 5px;
      border-left: 4px solid #ccc;
      background-color: #f9f9f9;
    }
    
    .message-item.pending {
      border-left-color: #ffc107;
    }
    
    .message-item.sent {
      border-left-color: #28a745;
    }
    
    .message-item.failed {
      border-left-color: #dc3545;
    }
    
    .status-pill {
      display: inline-block;
      padding: 3px 10px;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 500;
    }
    
    .status-pending {
      background-color: #ffeeba;
      color: #856404;
    }
    
    .status-sent {
      background-color: #d4edda;
      color: #155724;
    }
    
    .status-failed {
      background-color: #f8d7da;
      color: #721c24;
    }
    
    .message-details {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 5px;
    }
    
    .message-content {
      flex-grow: 1;
      margin-right: 15px;
      font-size: 0.9rem;
      white-space: pre-wrap;
    }
    
    .message-time {
      white-space: nowrap;
      font-size: 0.8rem;
      color: #6c757d;
    }
    
    .customer-info {
      margin-bottom: 8px;
      font-weight: 500;
    }
    
    .meta-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.8rem;
      color: #6c757d;
    }
    
    .settings-form .form-group {
      margin-bottom: 1rem;
    }
    
    .delay-controls {
      display: flex;
      align-items: center;
    }
    
    .delay-controls label {
      margin-right: 10px;
      white-space: nowrap;
    }
    
    .template-preview {
      padding: 10px;
      background-color: #f0f0f0;
      border-radius: 5px;
      margin-top: 10px;
      white-space: pre-wrap;
    }
    
    .stats-card {
      font-size: 0.9rem;
    }
    
    .stats-value {
      font-weight: bold;
      font-size: 1.2rem;
    }
    
    .message-actions {
      display: flex;
      gap: 5px;
    }
    
    .btn-sm {
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
    }
    
    @media (max-width: 768px) {
      .message-details {
        flex-direction: column;
      }
      
      .message-content {
        margin-right: 0;
        margin-bottom: 10px;
      }
    }

block content
  .page-header
    h1 Sales Sender
    p.text-muted Send automated WhatsApp messages to customers from sales data
  
  .sales-container
    .row
      .col-md-6
        .card
          .card-header
            h4 Sales Sender Settings
          .card-body
            form#settingsForm.settings-form
              .form-group
                label(for="initialMessageTemplate") 
                  | Initial Message Template 
                  span.text-muted (Sent after 
                    span#initialDelayLabel #{settings.initialMessageDelay}
                    |  hour(s))
                textarea#initialMessageTemplate.form-control(rows="4" name="initialMessageTemplate")= settings.initialMessageTemplate
                small.form-text.text-muted
                  | Use {name} and {surname} as variables that will be replaced with customer data.
                .template-preview
                  strong Preview:
                  div#initialPreview= settings.initialMessageTemplate.replace('{name}', 'Customer').replace('{surname}', 'Example')
              
              .form-group
                label Initial Message Delay
                .delay-controls
                  .input-group
                    input#initialMessageDelay.form-control.text-center(type="number" name="initialMessageDelay" min="1" value=settings.initialMessageDelay)
                    .input-group-append
                      span.input-group-text hour(s)
                  small.form-text.text-muted Messages scheduled for weekends will be sent on Monday. Default: 2 hours
              
              .form-group.mt-4
                label(for="followupMessageTemplate")
                  | Follow-up Message Template 
                  span.text-muted (Sent after 
                    span#followupDelayLabel #{settings.followupMessageDelay}
                    |  month(s))
                textarea#followupMessageTemplate.form-control(rows="4" name="followupMessageTemplate")= settings.followupMessageTemplate
                small.form-text.text-muted
                  | This message will be sent as a follow-up after the configured months.
                .template-preview
                  strong Preview:
                  div#followupPreview= settings.followupMessageTemplate.replace('{name}', 'Customer').replace('{surname}', 'Example')
              
              .form-group
                label Follow-up Message Delay
                .delay-controls
                  .input-group
                    input#followupMessageDelay.form-control.text-center(type="number" name="followupMessageDelay" min="1" value=settings.followupMessageDelay)
                    .input-group-append
                      span.input-group-text month(s)
                  small.form-text.text-muted Default: 6 months
              
              .form-check.mb-3
                input#isActive.form-check-input(type="checkbox" name="isActive" checked=settings.isActive)
                label.form-check-label(for="isActive") Enable Sales Sender
                .small.text-muted When enabled, new sales will be automatically processed for messaging
              
              .form-check.mb-3
                input#autoSend.form-check-input(type="checkbox" name="autoSend" checked=settings.autoSend)
                label.form-check-label(for="autoSend") Auto-send Messages
                .small.text-muted When enabled, messages will be automatically sent when their scheduled time arrives
              
              button.btn.btn-primary.mt-3(type="submit" id="saveSettings")
                i.fas.fa-save.mr-1
                | Save Settings
        
        .card.stats-card
          .card-header
            h4 Message Stats
            button.btn.btn-sm.btn-outline-secondary.float-right#refreshStats(type="button")
              i.fas.fa-sync-alt.mr-1
              | Refresh
          .card-body
            .row
              .col-sm-4.text-center
                .stats-label Initial Pending
                .stats-value.text-warning#initialPending= stats.initialPending || 0
              .col-sm-4.text-center
                .stats-label Follow-up Pending
                .stats-value.text-info#followupPending= stats.followupPending || 0
              .col-sm-4.text-center
                .stats-label Total Sent
                .stats-value.text-success#totalSent= stats.sent || 0
            
            .mt-3
              if stats.nextInitialMessageTime
                .small.text-muted
                  | Next initial message scheduled for:
                  span.ml-1.font-weight-bold#nextInitial= new Date(stats.nextInitialMessageTime).toLocaleString()
              
              if stats.nextFollowupMessageTime
                .small.text-muted
                  | Next follow-up message scheduled for:
                  span.ml-1.font-weight-bold#nextFollowup= new Date(stats.nextFollowupMessageTime).toLocaleString()
              
              if stats.lastSentTime
                .small.text-muted
                  | Last message sent:
                  span.ml-1.font-weight-bold#lastSent= new Date(stats.lastSentTime).toLocaleString()

        .card.mt-5
          .card-header
            h4 Recent Sales Data
          .card-body.pt-4
            .sales-data-list
              if salesData && salesData.length > 0
                .table-responsive
                  table.table.table-sm
                    thead
                      tr
                        th Sale ID
                        th Customer
                        th Phone
                        th Date
                        th Actions
                    tbody
                      each sale in salesData
                        - var customerName = sale.businessEntity && sale.businessEntity.name ? sale.businessEntity.name : 'N/A'
                        - var rawPhone = sale.businessEntity && sale.businessEntity.phone ? sale.businessEntity.phone : (sale.businessEntity && sale.businessEntity.mobile ? sale.businessEntity.mobile : 'N/A')
                        - var formattedPhone = rawPhone !== 'N/A' ? (rawPhone.startsWith('0') ? '+355' + rawPhone.substring(1) : (rawPhone.startsWith('355') ? '+' + rawPhone : '+355' + rawPhone)) : 'N/A'
                        - var date = sale.documentDate ? new Date(sale.documentDate).toLocaleDateString() : 'N/A'
                        tr
                          td= sale.id || 'N/A'
                          td= customerName
                          td= formattedPhone
                          td= date
                          td
                            button.btn.btn-sm.btn-primary.process-sale(data-id=sale.id)
                              i.fas.fa-paper-plane.mr-1
                              | Process
              else
                p.text-muted No sales data available.

      .col-md-6
        .card
          .card-header
            h4 Initial Messages
            span.badge.badge-pill.badge-primary.ml-2#initialCount= initialMessages.length
          .card-body
            .message-list#initialMessagesList
              if initialMessages && initialMessages.length > 0
                each message in initialMessages
                  .message-item(class=message.status data-id=message.id)
                    .message-details
                      .message-content= message.message
                      .status-pill(class=`status-${message.status}`)= message.status
                    .customer-info #{message.customerName} #{message.customerSurname} (#{message.phoneNumber})
                    .meta-info
                      .scheduled-time Scheduled: #{new Date(message.scheduledTime).toLocaleString()}
                      .message-actions
                        button.btn.btn-sm.btn-danger.delete-message(data-id=message.id, data-type="initial")
                          i.fas.fa-trash-alt
              else
                p.text-muted No initial messages found.
        
        .card
          .card-header
            h4 Follow-up Messages
            span.badge.badge-pill.badge-primary.ml-2#followupCount= followupMessages.length
          .card-body
            .message-list#followupMessagesList
              if followupMessages && followupMessages.length > 0
                each message in followupMessages
                  .message-item(class=message.status data-id=message.id)
                    .message-details
                      .message-content= message.message
                      .status-pill(class=`status-${message.status}`)= message.status
                    .customer-info #{message.customerName} #{message.customerSurname} (#{message.phoneNumber})
                    .meta-info
                      .scheduled-time Scheduled: #{new Date(message.scheduledTime).toLocaleString()}
                      .message-actions
                        button.btn.btn-sm.btn-danger.delete-message(data-id=message.id, data-type="followup")
                          i.fas.fa-trash-alt
              else
                p.text-muted No follow-up messages found.

block scripts
  script.
    // Initialize template preview
    function updatePreview(templateId, previewId) {
      const template = document.getElementById(templateId).value;
      const preview = document.getElementById(previewId);
      preview.textContent = template.replace('{name}', 'Customer').replace('{surname}', 'Example');
    }
    
    // Update preview on template change
    document.getElementById('initialMessageTemplate').addEventListener('input', function() {
      updatePreview('initialMessageTemplate', 'initialPreview');
    });
    
    document.getElementById('followupMessageTemplate').addEventListener('input', function() {
      updatePreview('followupMessageTemplate', 'followupPreview');
    });
    
    // Save settings
    document.getElementById('settingsForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const form = this;
      const formData = new FormData(form);
      const jsonData = {
        initialMessageTemplate: formData.get('initialMessageTemplate'),
        followupMessageTemplate: formData.get('followupMessageTemplate'),
        initialMessageDelay: formData.get('initialMessageDelay'),
        followupMessageDelay: formData.get('followupMessageDelay'),
        isActive: formData.has('isActive'),
        autoSend: formData.has('autoSend')
      };
      
      try {
        const response = await fetch('/sales-sender/settings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(jsonData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Show success message
          showAlert('Settings saved successfully', 'success');
        } else {
          showAlert(`Error: ${result.message}`, 'danger');
        }
      } catch (error) {
        console.error('Error saving settings:', error);
        showAlert('Error saving settings', 'danger');
      }
    });
    
    // Delete message
    document.querySelectorAll('.delete-message').forEach(button => {
      button.addEventListener('click', async function() {
        const messageId = this.getAttribute('data-id');
        const messageType = this.getAttribute('data-type');
        
        if (confirm('Are you sure you want to delete this message?')) {
          try {
            const response = await fetch(`/sales-sender/delete/${messageId}`, {
              method: 'POST'
            });
            
            const result = await response.json();
            
            if (result.success) {
              // Remove element from UI
              const messageItem = this.closest('.message-item');
              if (messageItem) {
                messageItem.remove();
              }
              
              // Update count
              const countElement = document.getElementById(`${messageType}Count`);
              if (countElement) {
                countElement.textContent = parseInt(countElement.textContent) - 1;
              }
              
              // Refresh stats
              refreshStats();
            } else {
              showAlert(`Error: ${result.message}`, 'danger');
            }
          } catch (error) {
            console.error('Error deleting message:', error);
            showAlert('Error deleting message', 'danger');
          }
        }
      });
    });
    
    // Process sale
    document.querySelectorAll('.process-sale').forEach(button => {
      button.addEventListener('click', async function() {
        const saleId = this.getAttribute('data-id');
        
        if (confirm('Are you sure you want to process this sale for messaging?')) {
          try {
            const response = await fetch('/sales-sender/process-sales', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ importId: saleId })
            });
            
            const result = await response.json();
            
            if (result.success) {
              showAlert(`${result.message}`, 'success');
              // Refresh message lists and stats
              await refreshMessages('initial');
              refreshStats();
            } else {
              showAlert(`Error: ${result.message}`, 'danger');
            }
          } catch (error) {
            console.error('Error processing sale:', error);
            showAlert('Error processing sale', 'danger');
          }
        }
      });
    });
    
    // Refresh stats
    async function refreshStats() {
      try {
        const response = await fetch('/sales-sender/refresh', {
          method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Update stats UI
          document.getElementById('initialPending').textContent = result.stats.initialPending || 0;
          document.getElementById('followupPending').textContent = result.stats.followupPending || 0;
          document.getElementById('totalSent').textContent = result.stats.sent || 0;
          
          // Update next scheduled times
          if (result.stats.nextInitialMessageTime) {
            document.getElementById('nextInitial').textContent = new Date(result.stats.nextInitialMessageTime).toLocaleString();
          }
          
          if (result.stats.nextFollowupMessageTime) {
            document.getElementById('nextFollowup').textContent = new Date(result.stats.nextFollowupMessageTime).toLocaleString();
          }
          
          if (result.stats.lastSentTime) {
            document.getElementById('lastSent').textContent = new Date(result.stats.lastSentTime).toLocaleString();
          }
        }
      } catch (error) {
        console.error('Error refreshing stats:', error);
      }
    }
    
    document.getElementById('refreshStats').addEventListener('click', refreshStats);
    
    // Refresh messages
    async function refreshMessages(type) {
      try {
        const response = await fetch(`/sales-sender/messages?type=${type}`);
        const result = await response.json();
        
        if (result.success) {
          const messagesContainer = document.getElementById(`${type}MessagesList`);
          const countElement = document.getElementById(`${type}Count`);
          
          if (messagesContainer) {
            // Clear current messages
            messagesContainer.innerHTML = '';
            
            if (result.messages && result.messages.length > 0) {
              // Update count
              if (countElement) {
                countElement.textContent = result.messages.length;
              }
              
              // Add new messages
              result.messages.forEach(message => {
                const messageItem = document.createElement('div');
                messageItem.className = `message-item ${message.status}`;
                messageItem.setAttribute('data-id', message.id);
                
                messageItem.innerHTML = `
                  <div class="message-details">
                    <div class="message-content">${message.message}</div>
                    <div class="status-pill status-${message.status}">${message.status}</div>
                  </div>
                  <div class="customer-info">${message.customerName || ''} ${message.customerSurname || ''} (${message.phoneNumber})</div>
                  <div class="meta-info">
                    <div class="scheduled-time">Scheduled: ${new Date(message.scheduledTime).toLocaleString()}</div>
                    <div class="message-actions">
                      <button class="btn btn-sm btn-danger delete-message" data-id="${message.id}" data-type="${type}">
                        <i class="fas fa-trash-alt"></i>
                      </button>
                    </div>
                  </div>
                `;
                
                messagesContainer.appendChild(messageItem);
              });
              
              // Add event listeners to new delete buttons
              messagesContainer.querySelectorAll('.delete-message').forEach(button => {
                button.addEventListener('click', async function() {
                  const messageId = this.getAttribute('data-id');
                  const messageType = this.getAttribute('data-type');
                  
                  if (confirm('Are you sure you want to delete this message?')) {
                    try {
                      const response = await fetch(`/sales-sender/delete/${messageId}`, {
                        method: 'POST'
                      });
                      
                      const result = await response.json();
                      
                      if (result.success) {
                        // Remove element from UI
                        const messageItem = this.closest('.message-item');
                        if (messageItem) {
                          messageItem.remove();
                        }
                        
                        // Update count
                        const countElement = document.getElementById(`${messageType}Count`);
                        if (countElement) {
                          countElement.textContent = parseInt(countElement.textContent) - 1;
                        }
                        
                        // Refresh stats
                        refreshStats();
                      } else {
                        showAlert(`Error: ${result.message}`, 'danger');
                      }
                    } catch (error) {
                      console.error('Error deleting message:', error);
                      showAlert('Error deleting message', 'danger');
                    }
                  }
                });
              });
            } else {
              // No messages
              messagesContainer.innerHTML = '<p class="text-muted">No messages found.</p>';
              if (countElement) {
                countElement.textContent = '0';
              }
            }
          }
        }
      } catch (error) {
        console.error(`Error refreshing ${type} messages:`, error);
      }
    }
    
    // Show alert
    function showAlert(message, type) {
      const alertContainer = document.createElement('div');
      alertContainer.className = `alert alert-${type} alert-dismissible fade show`;
      alertContainer.innerHTML = `
        ${message}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      `;
      
      const salesContainer = document.querySelector('.sales-container');
      salesContainer.insertBefore(alertContainer, salesContainer.firstChild);
      
      // Auto dismiss after 5 seconds
      setTimeout(() => {
        alertContainer.classList.remove('show');
        setTimeout(() => alertContainer.remove(), 150);
      }, 5000);
    }
    
    // Auto-refresh every 60 seconds
    setInterval(() => {
      refreshStats();
      refreshMessages('initial');
      refreshMessages('followup');
    }, 60000);
    
    // Update the delay label when the input changes
    document.getElementById('initialMessageDelay').addEventListener('input', function() {
      document.getElementById('initialDelayLabel').textContent = this.value;
    });
    
    document.getElementById('followupMessageDelay').addEventListener('input', function() {
      document.getElementById('followupDelayLabel').textContent = this.value;
    }); 